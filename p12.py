#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
module: p12.py
author: Zach Lamberty
created: 2014-02-13

Description:
    The sequence of triangle numbers is generated by adding the natural numbers.
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
    first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred
    divisors?

Notes:
    The Nth triangular number is easy to calculate:

    sum(0, 1, ..., N) = N * (N + 1) / 2

    Assume we break T_i into its prime factorization; the number of divisors
    is just the product of the exponents + 1 of the primes:

        T_i = p0**e0 * p1**e1 ...

        factors = (e0 + 1) * (e1 + 1) * ...

    Example:
        300 = 2**2 * 3 * 5**2

        Divisors:
        000 = 1
        001 = 5
        002 = 25
        010 = 3
        011 = 15
        012 = 75
        100 = 2
        101 = 10
        102 = 50
        110 = 6
        111 = 30
        112 = 150
        200 = 4
        201 = 20
        202 = 100
        210 = 12
        211 = 60
        212 = 300

        #{divisors} = (2 + 1)(1 + 1)(2 + 1) = 18

"""

import scipy

from collections import defaultdict
from math import sqrt


NUM_FACTORS = 500


def triangular_numbers():
    n = 1
    yield n
    while True:
        n += 1
        yield n * (n + 1) / 2


def num_factors(n):
    """ Given a number, count the number of possible factors """
    divisors = defaultdict(int)
    p = 2

    while n != 1:
        while n % p == 0:
            divisors[p] += 1
            n /= p
        p += 1

    return scipy.prod([el + 1 for el in divisors.values()])


if __name__ == '__main__':

    for t in triangular_numbers():
        if num_factors(t) > NUM_FACTORS:
            break

    print t
